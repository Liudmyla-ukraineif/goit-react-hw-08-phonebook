{"version":3,"file":"static/js/80.97c59358.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/form.js","components/ItemContact/ItemContact.styled.js","components/ItemContact/ItemContact.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/pages/ContactsBook.js"],"sourcesContent":["\n// для отримання масиву контактів з API\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\n\n\n// для отримання даних фільтру з API\n// export const selectContactFilter = state => state.filter;\n\nexport const selectContactFilter = state => state.filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\nimport { Box, Grid } from '@mui/material';\nimport phonebook from '../../image/phonebook.png';\n\nimport * as yup from 'yup';\n\nconst nameRegExp = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst phoneRegExp =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      nameRegExp,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  number: yup\n    .string()\n    .max(9)\n    .matches(\n      phoneRegExp,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nconst Forma = styled(Form)`\n  margin: 15px;\n  padding: 8px;\n  width: 400px;\n  border: 1px solid grey;\n  font-size: 16px;\n`;\n\nconst Input = styled(Field)`\n  display: block;\n  margin: 10px 0;\n  width: 320px;\n  color: #807c7c;\n  font-size: 14px;\n`;\n\nconst Button = styled.button`\n  margin: 10px 0;\n`;\n\n// початкові з-ня форми\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmitForm = (data, actions) => {\n    const isDuplicate = contacts.some(contact => contact.name === data.name);\n    if (isDuplicate) {\n      alert(`${data.name} is already in contacts`);\n    } else {\n      dispatch(addContact(data));\n    }\n    actions.setSubmitting(false);\n    actions.resetForm();\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={1}>\n        <Grid item xs={4}>\n\n            <img src={phonebook} alt=\"phonebook\" />\n\n        </Grid>\n        <Grid item xs={8}>\n\n            <Formik\n              initialValues={initialValues}\n              validationSchema={schema}\n              onSubmit={handleSubmitForm}\n            >\n              {({ isSubmitting }) => (\n                <Forma>\n                  <label>\n                    Name\n                    <Input type=\"text\" name=\"name\" />\n                    <ErrorMessage component=\"div\" name=\"name\" />\n                  </label>\n                  <label>\n                    Number phone\n                    <Input type=\"tel\" name=\"number\" />\n                    <ErrorMessage component=\"div\" name=\"number\" />\n                  </label>\n                  <Button type=\"submit\" disabled={isSubmitting}>\n                    Add contact\n                  </Button>\n                </Forma>\n              )}\n            </Formik>\n\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import styled from \"@emotion/styled\";\n\nexport const ContsctBlock = styled.li`\n  display: flex;\n  justify-content: space-between;\n  width: calc(100%/1.2);\n  height: 3em;\n  margin: 0 auto 8px auto;\n  padding: 16px;\n  align-items: center;\n  font-size: 16px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n`;\n\n\nexport const ContactName = styled.p`\n  text-align: center;\n  font-size: 18px;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  color: #292828;\n`;\n\nexport const ContactNumber = styled.p`\n  text-align: center;\n  font-size: 14px;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  color: #292828;\n`;\n\nexport const BtnDeleteContact = styled.button`\n  text-align: center;\n  padding: 4px 8px;\n  font-size: 12px;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  color: #292828;\n  background-color: #f7f7f7;\n  border: 1px solid #c7c3c3;\n  border-radius: 4px;\n`;","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\nimport PropTypes from 'prop-types';\nimport { ContsctBlock, ContactName, ContactNumber, BtnDeleteContact } from './ItemContact.styled';\n\n\nconst ItemContact = ({id, name, number}) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContsctBlock >\n      <ContactName>{name}: </ContactName>\n      <ContactNumber>{number}</ContactNumber>\n      <BtnDeleteContact onClick={handleDelete}>Delete</BtnDeleteContact>\n    </ContsctBlock>\n  )\n}\n\nexport default ItemContact;\n\n\nItemContact.propType = {\n    id: PropTypes.node.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.number.isRequired,\n}","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\nmargin: 10px 16px;`","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectIsLoading, selectContacts, selectError, selectContactFilter } from 'redux/contacts/selectors';\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport ItemContact from \"../ItemContact/ItemContact\";\nimport {List} from './ContactList.styled';\n\nconst ContactList = () => {\n  //отримуємо інформацію з API\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  //отримуємо дані фільтру\n  const contactFilter = useSelector(selectContactFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  \n  const visibleContacts = contactFilter\n    ? contacts.filter(({ name }) =>\n        name.toLowerCase().includes(contactFilter.toLowerCase())\n      )\n    : contacts;\n\n  return (\n    <List>\n      {isLoading && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n      {visibleContacts.map(({id, name, number}) => {\n        return (\n        <ItemContact key={id} id={id} name={name} number={number} />\n        )\n      })}    \n    </List>\n  )\n}\nexport default ContactList;","import { useDispatch, useSelector } from \"react-redux\";\nimport { selectContactFilter } from \"../../redux/contacts/selectors\";\nimport { changeFilter } from \"../../redux/contacts/filtersSlice\";\nimport { Box, TextField } from '@mui/material';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactFilter);\n\n  const handleChangeFilter = ({ target }) => {  \n    dispatch(changeFilter(target.value));\n  };\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'flex-end', justifyContent: 'center', mt: '1.5rem'}}>\n      <label>\n        Find contacts by name\n        <TextField\n          id=\"input-with-icon-textfield\"\n          variant=\"standard\"\n          type=\"text\"\n          \n          onChange={handleChangeFilter} value={filter}\n          sx={{ mb: '1.5rem', ml: '1rem' }}\n          \n        />\n      </label>\n    </Box>\n  )\n}\n\n\nexport default Filter;","import ContactForm from '../ContactForm/form';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport { Container, Box, Typography } from '@mui/material';\n\nconst ContactsBook = () => {\n\n  return (\n    <Container>\n      <Box>\n        <Typography variant=\"h2\" component=\"h1\" color=\"primary\" align=\"center\">\n          Phonebook\n        </Typography>\n        <ContactForm />\n      </Box>\n\n      <Box>\n        <Typography variant=\"h2\" component=\"h1\" color=\"primary\" align=\"center\">\n          Contacts\n        </Typography>\n        <Filter />\n        <ContactList />\n      </Box>\n    </Container>\n  );\n};\n\nexport default ContactsBook;\n"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectContactFilter","filter","schema","yup","shape","name","matches","required","number","max","Forma","styled","Form","Input","Field","Button","initialValues","useSelector","dispatch","useDispatch","Box","sx","flexGrow","Grid","container","spacing","item","xs","src","phonebook","alt","validationSchema","onSubmit","data","actions","some","contact","alert","addContact","setSubmitting","resetForm","isSubmitting","type","component","disabled","ContsctBlock","ContactName","ContactNumber","BtnDeleteContact","ItemContact","id","onClick","deleteContact","propType","PropTypes","List","contactFilter","useEffect","fetchContacts","visibleContacts","toLowerCase","includes","map","display","alignItems","justifyContent","mt","TextField","variant","onChange","target","changeFilter","value","mb","ml","Container","Typography","color","align"],"sourceRoot":""}