{"version":3,"file":"static/js/25.35b96fca.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/form.js","components/ItemContact/ItemContact.styled.js","components/ItemContact/ItemContact.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/pages/ContactsBook.js"],"sourcesContent":["\n// для отримання масиву контактів з API\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\n\n\n// для отримання даних фільтру з API\n// export const selectContactFilter = state => state.filter;\n\nexport const selectContactFilter = state => state.filter;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/operations\";\nimport { selectContacts } from \"../../redux/contacts/selectors\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\n\nconst nameRegExp = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\n\nconst phoneRegExp = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n\nconst schema = yup.object().shape({\n  name: yup.string().matches(nameRegExp, \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\").required('Required'),\n  number: yup.string().max(9).matches(phoneRegExp, \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\").required('Required'),\n});\n\nconst Forma = styled(Form)`\n  margin: 15px;\n  padding: 8px;\n  width: 400px;\n  border: 1px solid grey;\n  font-size: 16px;`;\n\nconst Input = styled(Field)`\n  display: block;\n  margin: 10px 0;\n  width: 320px;\n  color: #807C7C;\n  font-size: 14px;\n  `;\n\nconst Button = styled.button`\n  margin: 10px 0;`;\n\n// початкові з-ня форми\nconst initialValues = {\n    name: '',\n    number: '',\n}\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmitForm = ( data, actions ) => {\n    const isDuplicate = contacts.some((contact) => contact.name === data.name) \n    if (isDuplicate) {\n      alert(`${data.name} is already in contacts`)\n    } else {dispatch(addContact(data))}\n    actions.setSubmitting(false);\n    actions.resetForm();\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmitForm}>\n\n      {({ isSubmitting }) => (\n        (\n          <Forma>\n            <label>Name\n              <Input\n                type=\"text\"\n                name=\"name\"\n              />\n              <ErrorMessage component=\"div\" name=\"name\"/>\n\n            </label>\n            <label>Number phone\n              <Input\n                type=\"tel\"\n                name=\"number\"\n              />\n              <ErrorMessage component=\"div\" name=\"number\"/>\n            </label>\n            <Button type=\"submit\" disabled={isSubmitting}>Add contact</Button>\n          </Forma>\n        )\n      )}\n    </Formik>\n  );\n}\n\nexport default ContactForm;","import styled from \"@emotion/styled\";\n\nexport const ContsctBlock = styled.li`\n  display: flex;\n  justify-content: space-between;\n  width: calc(100%/1.2);\n  height: 3em;\n  margin: 0 auto 8px auto;\n  padding: 16px;\n  align-items: center;\n  font-size: 16px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n`;\n\n\nexport const ContactName = styled.p`\n  text-align: center;\n  font-size: 18px;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  color: #292828;\n`;\n\nexport const ContactNumber = styled.p`\n  text-align: center;\n  font-size: 14px;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  color: #292828;\n`;\n\nexport const BtnDeleteContact = styled.button`\n  text-align: center;\n  padding: 4px 8px;\n  font-size: 12px;\n  font-weight: 400;\n  letter-spacing: 0.5px;\n  color: #292828;\n  background-color: #f7f7f7;\n  border: 1px solid #c7c3c3;\n  border-radius: 4px;\n`;","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\nimport PropTypes from 'prop-types';\nimport { ContsctBlock, ContactName, ContactNumber, BtnDeleteContact } from './ItemContact.styled';\n\n\nconst ItemContact = ({id, name, number}) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContsctBlock >\n      <ContactName>{name}: </ContactName>\n      <ContactNumber>{number}</ContactNumber>\n      <BtnDeleteContact onClick={handleDelete}>Delete</BtnDeleteContact>\n    </ContsctBlock>\n  )\n}\n\nexport default ItemContact;\n\n\nItemContact.propType = {\n    id: PropTypes.node.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.number.isRequired,\n}","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\nmargin: 10px 16px;`","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectIsLoading, selectContacts, selectError, selectContactFilter } from 'redux/contacts/selectors';\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport ItemContact from \"../ItemContact/ItemContact\";\nimport {List} from './ContactList.styled';\n\nconst ContactList = () => {\n  //отримуємо інформацію з API\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  //отримуємо дані фільтру\n  const contactFilter = useSelector(selectContactFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  \n  const visibleContacts = contactFilter\n    ? contacts.filter(({ name }) =>\n        name.toLowerCase().includes(contactFilter.toLowerCase())\n      )\n    : contacts;\n\n  return (\n    <List>\n      {isLoading && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n      {visibleContacts.map(({id, name, number}) => {\n        return (\n        <ItemContact key={id} id={id} name={name} number={number} />\n        )\n      })}    \n    </List>\n  )\n}\nexport default ContactList;","import { useDispatch, useSelector } from \"react-redux\";\nimport { selectContactFilter } from \"../../redux/contacts/selectors\";\nimport { changeFilter } from \"../../redux/contacts/filtersSlice\";\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactFilter);\n\n  const handleChangeFilter = ({ target }) => {  \n    dispatch(changeFilter(target.value));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <input type='text' onChange={handleChangeFilter} value={filter} />\n    </label>\n)};\n\n\nexport default Filter;","\n// import { useDispatch, useSelector } from 'react-redux';\n// import selectIsLoading from '../../redux/contacts/selectors';\nimport ContactForm from '../ContactForm/form';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\n\nconst ContactsBook = () => {\n  // const dispatch = useDispatch();\n  // const isLoadingContacts = useSelector(selectIsLoading);\n  // const \n\n\n\n\n  return(\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  )\n};\n\nexport default ContactsBook;"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectContactFilter","filter","schema","yup","shape","name","matches","required","number","max","Forma","styled","Form","Input","Field","Button","initialValues","useSelector","dispatch","useDispatch","validationSchema","onSubmit","data","actions","some","contact","alert","addContact","setSubmitting","resetForm","isSubmitting","type","component","disabled","ContsctBlock","ContactName","ContactNumber","BtnDeleteContact","ItemContact","id","onClick","deleteContact","propType","PropTypes","List","contactFilter","useEffect","fetchContacts","visibleContacts","toLowerCase","includes","map","onChange","target","changeFilter","value"],"sourceRoot":""}